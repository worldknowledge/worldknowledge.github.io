---
permalink: security/openssl-quick-tips
layout: post
title: 'OpenSSL Quick Tips'
excerpt: 'In this article, I am going to share with you my usage of openssl tool'
tags:
  - security
  - openssl
category: security
---

In this article, I am going to share with you my usage of openssl tool

## Generate an RSA key

> To encrypt something using RSA algorithm you need modulus and encryption exponent pair (n, e) which is your public key. To decrypt something using RSA algorithm you need modulus and decryption exponent pair (n, d) which is your private key.<br/><br/>To encrypt something using RSA public key you treat your plaintext as a number and raise it to the power of e modulus n : ciphertext = ( plaintext ^ e) mod n<br/><br/>To decrypt something using RSA private key you treat your ciphertext as a number and raise it to the power of d modulus n : plaintext = ( ciphertext ^ d) mod n<br/>[**â€” golem**](#)

To generate private (d, n) key using openssl you can use the following command

```shell
openssl genrsa -out example.key 4096
```

To generate public (e, n) key from the private key using openssl you can use the following command

```shell
openssl rsa -in example.key -out example.pub -pubout
```

To dissect the contents of the private.pem private RSA key generated by the openssl command above run the following

```shell
openssl rsa -in example.key -text -noout

modulus         - n
privateExponent - d
publicExponent  - e
prime1          - p
prime2          - q
exponent1       - d mod (p-1)
exponent2       - d mod (q-1)
coefficient     - (q^-1) mod p
```

Shouldn't private key consist of (n, d) pair only? Why are there 6 extra components? It contains e so that public RSA key can be generated from the private RSA key. The rest 5 components are there to speed up the decryption process.

## Create certificate signing requests (CSR)

```shell
openssl req -new -key example.key -out example.csr -sha256
```

## Create X.509 certificates

Create self-signed certificate and new private key from scratch

```shell
openssl req -nodes -newkey rsa:2048 -x509 -days 365 \
-keyout example.key \
-out example.crt
```

Create a self signed certificate using existing CSR and private key

```shell
openssl x509 -req -days 365 \
-signkey example.key \
-in example.csr \
-out example.crt
```

Sign child certificate using your own CA certificate and it's private key. If you were a CA company, this shows a very naive example of how you could issue new certificates

```shell
openssl x509 -req  -days 365 -set_serial 01 \
-CA ca.crt -CAkey ca.key \
-in child.csr \
-out child.crt
```

Print textual representation of the certificate

```shell
openssl x509 -in example.crt -text -noout

Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number:
            39:c7:47:0c:c0:de:f2:5c:43:81:ee:19:c3:2b:2f:6d:fd:a0:d0:1d
        Signature Algorithm: sha256WithRSAEncryption
        Issuer: C = AU, ST = Some-State, O = Internet Widgits Pty Ltd
        Validity
            Not Before: Sep 30 18:37:29 2019 GMT
            Not After : Sep 29 18:37:29 2020 GMT
        Subject: C = AU, ST = Some-State, O = Internet Widgits Pty Ltd
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                RSA Public-Key: (2048 bit)
                Modulus:
                    00:ea:82:1d:3b:89:6f:d1:3e:35:19:0c:1f:36:23:
                    e2:fd:66:d0:a4:de:68:da:80:10:2a:21:44:e3:f5:
                    61:c8:36:71:23:59:7d:b6:25:f7:db:17:90:58:ec:
                    67:2c:f7:f2:d6:20:6e:cb:9b:ff:18:8a:ff:20:a0:
                    6b:71:d6:b8:14:7c:8d:c5:e7:fb:a4:0c:89:1e:ab:
                    06:47:ed:90:fc:85:89:d0:3b:87:04:b0:52:c1:86:
                    a5:3e:1a:07:a1:dc:06:35:4a:48:77:f2:eb:1a:02:
                    30:ec:23:41:25:a5:2b:b2:3f:ee:58:73:cb:62:52:
                    fc:e5:a4:09:ec:5d:fa:e9:1b:67:3e:04:8e:2d:92:
                    e2:53:ed:c3:ce:05:dc:11:f9:4d:d4:bd:24:fb:4d:
                    09:2d:61:26:d1:c0:02:4a:7d:c6:9a:45:c9:0b:27:
                    6f:8a:08:11:04:e7:ea:74:93:7b:4d:4c:bb:68:53:
                    1b:00:11:e5:30:cf:38:15:bd:31:7d:dd:e9:ae:13:
                    e0:65:94:66:cd:3e:50:37:fa:f9:69:c2:8d:3e:c7:
                    2b:66:96:1b:fb:e6:29:31:5a:56:61:5a:d3:ad:b0:
                    7b:a1:fc:46:9b:f3:7f:40:a3:f2:8d:c6:20:ec:64:
                    3b:ac:00:45:9d:64:b1:b0:4c:79:05:81:28:56:69:
                    5d:f9
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Subject Key Identifier:
                37:98:A8:35:F4:E1:55:92:F3:E9:25:54:12:1D:E5:8F:78:32:D1:10
            X509v3 Authority Key Identifier:
                keyid:37:98:A8:35:F4:E1:55:92:F3:E9:25:54:12:1D:E5:8F:78:32:D1:10

            X509v3 Basic Constraints: critical
                CA:TRUE
    Signature Algorithm: sha256WithRSAEncryption
            8e:ce:aa:9e:bf:4e:a3:3d:6b:8d:1c:62:32:d6:58:ed:aa:41:
            c7:be:39:bc:59:cc:c7:e6:b1:c4:3c:88:d6:52:bd:41:9f:83:
            99:8a:fe:d3:55:6e:fa:76:d7:01:08:aa:c3:f7:14:4a:2a:63:
            8f:ca:18:43:5c:a2:51:53:be:d2:04:ee:5a:04:c3:ff:f8:59:
            1e:a0:90:2f:a5:2d:fb:61:7b:83:75:92:e4:a8:b4:49:eb:be:
            83:2f:3f:3d:05:07:d3:45:3a:77:81:c3:26:71:87:e5:be:e5:
            09:b0:fc:7f:f6:53:d8:30:ed:f8:65:6c:a3:ae:7d:b1:3d:f2:
            7f:70:73:51:bd:59:b3:07:1b:8e:19:e2:29:98:98:85:1a:f4:
            a7:28:43:4f:69:af:f6:62:ff:71:53:f4:ed:c0:13:3f:2f:27:
            3b:b2:c9:f6:68:b7:bc:a9:05:d6:d2:14:ad:74:25:29:e6:41:
            8f:6d:bd:fb:c6:a4:17:75:16:8b:d5:ef:aa:be:d7:c3:1b:e6:
            a0:b0:97:01:d7:8c:71:d5:6f:bf:be:6e:66:f7:00:9f:e4:99:
            d8:1f:8d:45:6b:60:8c:2d:f8:31:6d:85:8f:39:b3:8a:72:bc:
            78:35:83:45:69:3b:89:9b:c9:fe:3b:b5:12:aa:cc:f2:0c:62:
            34:69:ef:d7
```

## TLS client to connect to a remote server

Connect to a server supporting TLS

```shell
openssl s_client -connect example.com:443
```

Connect to a server and show full certificate chain

```shell
openssl s_client -showcerts -host example.com -port 443
```

I hope it was useful :)

## References

- [OpenSSL command cheatsheet](https://www.freecodecamp.org/news/openssl-command-cheatsheet-b441be1e8c4a/){:target="\_blank"}
- [How to use rsa private key to generate public key](https://stackoverflow.com/questions/5244129/use-rsa-private-key-to-generate-public-key){:target="\_blank"}
